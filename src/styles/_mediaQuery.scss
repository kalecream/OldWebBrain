// Code fount at https://stackoverflow.com/questions/62528918/media-query-scss-breakpoints-best-practice
// 2023-08-31

@use "sass:string";
@use "sass:map";

$break-points: (
  mobile: 0,
  phone: 480px,
  tablet: 720px,
  desktopSmall: 960px,
  desktop: 1240px,
  desktopLarge: 1920px,
);


/** Helper to build @media query. Use named arguments only! */
/// @param {string} $mode - Media type (screen, print, etc.)
/// @param {string} $from - Starting breakpoint name
/// @param {string} $to - Ending breakpoint name
/// @param {map} $extra - Additional media query conditions
@mixin breakpoint-range($mode: screen, $from: false, $to: false, $extra: ()) {
  /** Checking arguments consistency */
  @if $from and not map.has-key($break-points, $from) {
    @error "Invalid $from value '#{$from}'. Available breakpoints: #{map.keys($break-points)}";
  }
  
  @if $to and not map.has-key($break-points, $to) {
    @error "Invalid $to value '#{$to}'. Available breakpoints: #{map.keys($break-points)}";
  }

  /** Accumulator */
  $conditions: $mode;
  
  @if $from {
    $min-value: map.get($break-points, $from);
    $conditions: string.insert($conditions, " and (min-width: #{$min-value})", -1);
  }
  
  @if $to {
    $max-value: map.get($break-points, $to) - 1px;
    $conditions: string.insert($conditions, " and (max-width: #{$max-value})", -1);
  }
  
  @each $key, $value in $extra {
    $conditions: string.insert($conditions, " and (#{$key}: #{$value})", -1);
  }
  
  @media #{$conditions} {
    @content;
  }
}

/** 
*
** Usage example
*
**/

// @include breakpoint-range(
//   $from: tablet,
//   $to: desktopLarge,
//   $extra: (orientation: landscape, prefers-color-scheme: dark)
// ) {
  // Result: @media screen 
  //           and (min-width: 720px)
  //           and (max-width: 1919px)
  //           and (orientation: landscape)
  //           and (prefers-color-scheme: dark)
// }
