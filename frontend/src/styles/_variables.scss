



// @mixin themify( $themes: $themes ) {
//   @each $theme, $map in $themes {

//     .theme-#{$theme} & {
//       $theme-map: () !global;
//       @each $key, $submap in $map {
//         $value: map-get(map-get($themes, $theme), '#{$key}');
//         $theme-map: map-merge($theme-map, ($key: $value)) !global;
//       }

//       @content;
//       $theme-map: null !global;
//     }

//   }
// }


// @function themed($key) {
//   @return map-get($theme-map, $key);
// }

//TODO: If you're going to be adding a lot of themes or a theme will be touching a lot of stuff, you might want to set up your SCSS files a little differently so that all the theming doesn't bloat your main CSS file (like the example above would do). One way to do this might be to create a themes.scss file and replicate any selector paths that need theming and have a second build script that outputs just the themes.scss file.
 
//  https://www.kevinpowell.co/article/dynamic-text-color-with-sass/
@mixin dynamicText($background) {
  $color: #fff;
  @if (lightness($background) > 50) {
    $color: #000;
  }
} 

@mixin dynamicColor($color) {
  background: $color;
  color: text($color);
}

